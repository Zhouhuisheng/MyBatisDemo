<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace需要和Mapper接口的全类名保持一致 -->
<mapper namespace="mybatis.mapper.UserMapper">
    <!--
        id：绑定方法 执行匹配的SQL语句
        resultType：指定返回值类型 将表中查询的数据封装成哪个类的对象
    -->
    <select id="selectAll" resultType="mybatis.pojo.User">
        select * from t_user
    </select>

    <!--
        数据库表的字段名称 和 实体类的属性名称 不一样，则不能自动封装数据
            * 解决方式1：
                sql语句中不一样的字段取别名，使得数据库字段的别名和实体类的属性名一样
                    缺点：每次查询都要起别名，太长了
                        解决缺点方式：定义sql片段，调用sql语句中直接引用该sql片段即可
            * 解决方式2：
                用resultMap标签做映射（听不明白，用到了再学）
     -->
    <select id="selectByName" resultType="mybatis.pojo.User">
        select id, user_name as userName, sex, address from t_user where user_name = #{name};
        <!-- select * from t_user where user_name = #{name}; -->
    </select>

    <sql id="sql_block">
        id, user_name as userName, sex, address
    </sql>

    <!--
        参数占位符
            1. #{}: 会将其替换为? 可以防止SQL注入的问题
            2. ${}: 拼接sql，会存在SQL注入的问题，不安全
     -->
    <select id="selectById" resultType="mybatis.pojo.User">
        select
            <include refid="sql_block"/>
        from
            t_user
        where
            id = ${id};
    </select>

    <!--
    特殊字符
        概述
            在使用某些特殊字符，例如 < 时，因为xml的原因无法使用时，需要解决
        解决
            方式一：转义
            方式二：CDATA区
                输入CD会有提示，回车 在CDATA区中输入特殊字符即可
    -->
    <select id="selectByLessId" resultType="mybatis.pojo.User">
        select
            <include refid="sql_block"/>
        from
            t_user
        where
            <!-- CDATA区解决特殊字符的问题 -->
            id <![CDATA[ < ]]> ${id};
    </select>
    <select id="selectByCondition" resultType="mybatis.pojo.User">
        select
            id, user_name userName, sex, address
        from
            t_user
        where
            sex = #{sex} and address like #{address}
    </select>
    <select id="selectByCondition2" resultType="mybatis.pojo.User">
        select
            id, user_name userName, sex, address
        from
            t_user
        where
            sex = #{sex} and address like #{address}
    </select>

    <!--
        多条件动态查询
            if标签：条件判断
                * test：写逻辑表达式
                * 标签体：写执行的sql语句
            遇到问题：某个条件缺失时，and的有无会导致sql语法错误
                * 解决方式一：恒等式（在每个条件语句前加上and，开头加个恒等式）
                * 解决方式二：<where>替换where关键字
    -->
    <select id="selectByDynamicCondition" resultType="mybatis.pojo.User">
        select
            id, user_name userName, sex, address
        from
            t_user
        <!--  解决方式二：<where>替换where关键字 -->
        <where>
            <if test="userName != null and userName != '' ">
                and user_name like #{userName}
            </if>

            <if test="sex != null and sex != '' ">
                and sex = #{sex}
            </if>

            <if test="address != null and address != '' ">
                and address like #{address}
            </if>
        </where>
    </select>
    <!--
        单条件动态查询(遇到一个条件符合就执行，且只会执行一个)
    -->
    <select id="selectByDynamicSingleCondition" resultType="mybatis.pojo.User">
        select
            id, user_name userName, sex, address
        from
            t_user
        where
            <choose> <!-- 相当于switch 但是只会选择一个case就跳出 -->
                <when test="userName != null and userName != '' "> <!-- 相当于case -->
                    user_name like #{userName}
                </when>
                <when test="sex != null and sex != '' ">
                    sex = #{sex}
                </when>
                <when test="address != null and address != '' ">
                    address like #{address}
                </when>
                <otherwise> <!-- 相当于default -->
                    1 = 1
                </otherwise>
            </choose>
    </select>

    <!-- 添加 -->
    <insert id="add">
        insert into t_user(user_name, sex, address)
        values(#{userName}, #{sex}, #{address})
    </insert>

    <!-- 修改 -->
    <update id="update">
        update
            t_user
        set
            user_name = #{userName},
            sex = #{sex},
            address = #{address}
        where
            id = #{id}
    </update>
    <!-- 动态修改 -->
    <update id="updateByDynamic">
        update
            t_user
        <set> <!-- set标签可以避免动态修改时逗号的问题 -->
            <if test="userName != null and userName != '' ">
                user_name = #{userName}
            </if>
            <if test="sex != null and sex != '' ">
                sex = #{sex}
            </if>
            <if test="address != null and address != '' ">
                address = #{address}
            </if>
        </set>
        where
            id = #{id}
    </update>

    <!-- 删除 -->
    <delete id="deleteById">
        delete
        from
            t_user
        where
            id = #{id}
    </delete>
    <!-- 批量删除 -->
    <delete id="deleteByIds">
        delete
        from
            t_user
        where id
        in (
            <!-- collection:数组， item：数组的元素， separator：分隔符 -->
            <foreach collection="ids" item="id" separator=",">
                #{id}
            </foreach>
            );
    </delete>

    <!-- 测试多个参数 -->
    <select id="MultipleParam" resultType="mybatis.pojo.User">
        select
            *
        from
            t_user
        where
            <!-- Mapper接口中未指定@Param时，默认的key param1、arg0、param2、arg1都可以用 -->
            <!-- user_name = #{param1} or address = #{param2} -->
            user_name = #{arg0} or address = #{arg1}
    </select>
</mapper>
